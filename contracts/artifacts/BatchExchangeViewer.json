{"abi":[{"constant":true,"inputs":[],"name":"INDEXED_AUCTION_ELEMENT_WIDTH","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ADDRESS_WIDTH","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"LARGE_PAGE_SIZE","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"AUCTION_ELEMENT_WIDTH","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"ALL_TOKEN_FILTER","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"exchange","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[{"name":"tokenFilter","type":"address[]"}],"name":"getOpenOrderBook","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenFilter","type":"address[]"},{"name":"previousPageUser","type":"address"},{"name":"previousPageUserOffset","type":"uint16"},{"name":"maxPageSize","type":"uint16"}],"name":"getOpenOrderBookPaginated","outputs":[{"name":"elements","type":"bytes"},{"name":"hasNextPage","type":"bool"},{"name":"nextPageUser","type":"address"},{"name":"nextPageUserOffset","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenFilter","type":"address[]"}],"name":"getFinalizedOrderBook","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenFilter","type":"address[]"},{"name":"previousPageUser","type":"address"},{"name":"previousPageUserOffset","type":"uint16"},{"name":"maxPageSize","type":"uint16"}],"name":"getFinalizedOrderBookPaginated","outputs":[{"name":"elements","type":"bytes"},{"name":"hasNextPage","type":"bool"},{"name":"nextPageUser","type":"address"},{"name":"nextPageUserOffset","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"batchIds","type":"uint32[3]"},{"name":"tokenFilter","type":"uint16[]"},{"name":"previousPageUser","type":"address"},{"name":"previousPageUserOffset","type":"uint16"},{"name":"maxPageSize","type":"uint16"}],"name":"getFilteredOrdersPaginated","outputs":[{"name":"elements","type":"bytes"},{"name":"hasNextPage","type":"bool"},{"name":"nextPageUser","type":"address"},{"name":"nextPageUserOffset","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"previousPageUser","type":"address"},{"name":"previousPageUserOffset","type":"uint16"},{"name":"pageSize","type":"uint256"}],"name":"getEncodedOrdersPaginated","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenFilter","type":"uint16[]"},{"name":"previousPageUser","type":"address"},{"name":"previousPageUserOffset","type":"uint16"},{"name":"pageSize","type":"uint256"}],"name":"getEncodedOrdersPaginatedWithTokenFilter","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenFilter","type":"uint16[]"},{"name":"previousPageUser","type":"address"},{"name":"previousPageUserOffset","type":"uint16"},{"name":"elements","type":"bytes"}],"name":"writeEncodedOrdersPaginatedWithTokenFilter","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"buyToken","type":"uint16"},{"name":"sellToken","type":"uint16"},{"name":"filter","type":"uint16[]"}],"name":"matchesTokenFilter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"}],"name":"getUser","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"}],"name":"getSellTokenBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"},{"name":"amount","type":"uint256"}],"name":"updateSellTokenBalance","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"}],"name":"getBuyToken","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"}],"name":"getSellToken","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"}],"name":"getValidFrom","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"}],"name":"getValidUntil","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"tokenIds","type":"address[]"}],"name":"getTokenIdsFromAdresses","outputs":[{"name":"","type":"uint16[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"element","type":"bytes"},{"name":"targetBatchIndex","type":"uint32"}],"name":"updateSellTokenBalanceForBatchId","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint16"}],"name":"getTokenInfo","outputs":[{"name":"","type":"address"},{"name":"symbol","type":"string"},{"name":"decimals","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"token","type":"address"}],"name":"getTokenSymbolString","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"token","type":"address"}],"name":"getTokenSymbolBytes","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"buffer","type":"bytes"},{"name":"length","type":"uint256"}],"name":"setLength","outputs":[],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"bytes"},{"name":"destination","type":"bytes"},{"name":"offset","type":"uint256"}],"name":"copyInPlace","outputs":[],"payable":false,"stateMutability":"pure","type":"function"}],"contractName":"BatchExchangeViewer","devdoc":{"methods":{"getEncodedOrdersPaginated(address,uint16,uint256)":{"details":"View returning byte-encoded sell orders in paginated form. It has the same behavior as BatchExchange.getEncodedUsersPaginated but uses less memory and thus is more gas efficient.","params":{"pageSize":"uint determining the count of orders to be returned per page","previousPageUser":"address of last user received in the previous page (address(0) for first page)","previousPageUserOffset":"the number of orders received for the last user on the previous page (0 for first page)."},"return":"encoded bytes representing a page of orders ordered by (user, index)"},"getFilteredOrdersPaginated(uint32[3],uint16[],address,uint16,uint16)":{"details":"Queries a page in the list of all orders","params":{"batchIds":"Triple with the following values [maxValidFrom, minValidUntil, sellBalanceTargetBatchIndex] Batched together as we are running out of local variables (Solidity does not compile with Stack too deep error)     - maxValidFrom: all returned orders will have a validFrom <= this value (they were placed at or before that batch)     - minValidUntil all returned orders will have a validUntil >= this value (validity ends at or after that batch)     - sellBalanceTargetBatchIndex the batchIndex at which we are expecting the sellTokenBalance to be valid (e.g. in the current live orderbook we want to include sellBalances that are valid in currentBatch + 1).","maxPageSize":"maximum count of elements to be returned per page (same value is used for subqueries on the exchange)","previousPageUser":"address taken from nextPageUser return value from last page (address(0) for first page)","previousPageUserOffset":"offset taken nextPageUserOffset return value from last page (0 for first page)","tokenFilter":"all returned order will have buy *and* sell token from this list (leave empty for \"no filter\")"},"return":"encoded bytes representing orders and page information for next page. Result can contain less elements than maxPageSize if remaining gas is low."},"getFinalizedOrderBook(address[])":{"details":"Queries the orderbook for the auction that is currently being solved","params":{"tokenFilter":"all returned order will have buy *and* sell token from this list (leave empty for \"no filter\")"},"return":"encoded bytes representing orders, maxed at 5000 elements"},"getFinalizedOrderBookPaginated(address[],address,uint16,uint16)":{"details":"Queries a page of the orderbook for the auction that is currently being solved","params":{"maxPageSize":"count of elements to be returned per page (same value is used for subqueries on the exchange)","previousPageUser":"address taken from nextPageUser return value from last page (address(0) for first page)","previousPageUserOffset":"offset taken nextPageUserOffset return value from last page (0 for first page)","tokenFilter":"all returned order will have buy *and* sell token from this list (leave empty for \"no filter\")"},"return":"encoded bytes representing orders and page information for next page"},"getOpenOrderBook(address[])":{"details":"Queries the orderbook for the auction that is still accepting orders","params":{"tokenFilter":"all returned order will have buy *and* sell token from this list (leave empty for \"no filter\")"},"return":"encoded bytes representing orders, maxed at 5000 elements"},"getOpenOrderBookPaginated(address[],address,uint16,uint16)":{"details":"Queries a page of the orderbook for the auction that is still accepting orders","params":{"maxPageSize":"count of elements to be returned per page (same value is used for subqueries on the exchange)","previousPageUser":"address taken from nextPageUser return value from last page (address(0) for first page)","previousPageUserOffset":"offset taken nextPageUserOffset return value from last page (0 for first page)","tokenFilter":"all returned order will have buy *and* sell token from this list (leave empty for \"no filter\")"},"return":"encoded bytes representing orders and page information for next page"},"getTokenInfo(uint16)":{"details":"Queries the token information for the given tokenId. Can handle symbols of type string and bytes (e.g. MKR). Returns \"Unknown\" as symbol value if it cannot be retrieved and reverts if decimals can not be fetched (to avoid ambiguity with a \"valid\" value).","params":{"tokenId":"the ID of a token listed on BatchExchange"},"return":"the address, symbol and decimals of the token contract"},"getTokenSymbolBytes(address)":{"details":"returns the symbol() of the given address assuming it is returned as a bytes. Reverts if method does not exist or returns data that cannot be casted into a string.","params":{"token":"the token address from which to receive the symbol"},"return":"the token's symbol converted into a trimmed (trailing 0 bytes remove) string."},"getTokenSymbolString(address)":{"details":"returns the symbol() of the given address assuming it is returned as a string. Reverts if method does not exist or returns data that is not a valid string.","params":{"token":"the token address from which to receive the symbol"},"return":"the token's symbol"},"setLength(bytes,uint256)":{"details":"Sets the length of the given buffer (truncating any items exceeding the length). Note, that this can lead to memory leakage or undefined behavior if length  is larger than the size that was originally allocated by the buffer."}}},"networks":{"1":{"address":"0x7D071fb584b51D9c38572A04E1848afd835cD457","links":{},"transactionHash":"0xd1be3b9bfc2bab273e3893ebc56c2925c2e41ab70d96694705bd90dbedcfd1c3"},"4":{"address":"0x0A7a7E35098b5F969E5d45680827AC478e6e8Ce3","links":{},"transactionHash":"0x0e2ea4e0550d0b960aacc10576ac7e07c5285696f08a0b4b8f608f5b3f098a4f"}},"userdoc":{"methods":{}}}